---
layout: default
---

.page
  .header
    %h1 Animal, Vegetable, or Mineral?
    %p wherein prototypal inheritance models the universe in JavaScript

.page
  %h3 First, a root object:
  %pre
    :preserve
      var thing = {
        location: 'the universe',
        organic: false,
        motile: false
      };
.page
  .header
    %h3 Then, to inherit from thing.
    %p The old-fashioned way takes 3 lines:
  %pre
    :preserve
      var ConstructThing = function() {};
      ConstructThing.prototype = thing;
      var mineral = new ConstructThing();
  %pre
    :preserve
      mineral.location;
.page
  %h3 We could have the constructor do something:
  %pre
    :preserve
      var ConstructThing = function() {
        this.createdAt = new Date;
      };
      ConstructThing.prototype = thing;
      mineral = new ConstructThing();
.page
  %h3 Moving along to the rest of the universe
  %pre
    :preserve
      var ConstructMineral = function(){};
      ConstructMineral.prototype = mineral;
  %pre
    :preserve
      var organism = new ConstructThing();
      organism.organic = true;

      var ConstructOrganism = function(){};
      ConstructOrganism.prototype = organism;
.page
  %pre
    :preserve
      var vegetable = new ConstructOrganism;
      var ConstructVegetable = function(){};
      ConstructVegetable.prototype = vegetable;
.page
  %pre
    :preserve
      var animal = new ConstructOrganism;
      animal.motile = true;
  %pre
    :preserve
      var ConstructAnimal = function(){};
      ConstructAnimal.prototype = animal;
.page
  %pre
    :preserve
      var caveMan = new ConstructAnimal;
      var club = new ConstructVegetable;
      var rock = new ConstructMineral;
  %pre
    :preserve
      [caveMan, club, rock].map(function(o) { return o.location });
  %pre
    :preserve
      [caveMan, club, rock].map(function(o) { return o.organic });
  %pre
    :preserve
      [caveMan, club, rock].map(function(o) { return o.motile });
.page
  %h3
    Problems with this approach:
  %ol.split
    %li It's rather awkward. (verbose, and conflicted)
    %li
      The danger of forgetting "new":
      %pre
        :preserve
          var OtherWindow = function(location) {
            this.location = location;
          }
          var anotherWindow = new OtherWindow(); // fine
          var anotherWindow = OtherWindow();     // doh!
    %li.split
      %p Constructors are not inheritable:
      %pre
        :preserve
          [caveMan, club, rock].map(function(o) { return o.createdAt });
.page
  .header
    %h3 Could there be a less awkward way to inherit?
    %p One great answer: ECMAScript5 gives us:
  %pre
    :preserve
      var something = Object.create(thing);
  :markdown
    We can easily backport this (see [javascript.crockford.com/prototypal.html](http://javascript.crockford.com/prototypal.html)):
  %pre
    :preserve
      Object.create = function (proto) {
        function Constructor() {}
        Constructor.prototype = proto;
        return new Constructor();
      };
.page
  %h2 Let's set up that taxonomy up again.
  %pre
    :preserve
      var thing = {
        location: 'the universe',
        organic: false,
        motile: false
      };
  %pre
    :preserve
      mineral = Object.create(thing);

      organism = Object.create(thing);
      organism.organic = true;

      vegetable = Object.create(organism);

      animal = Object.create(organism);
      animal.motile = true;
.page
  %pre
    :preserve
      caveMan = Object.create(animal);
      club = Object.create(vegetable);
      rock = Object.create(mineral);
  %pre
    :preserve
      [caveMan, club, rock].map(function(o) { return o.location });
  %pre
    :preserve
      [caveMan, club, rock].map(function(o) { return o.organic });
  %pre
    :preserve
      [caveMan, club, rock].map(function(o) { return o.motile });
.page
  %h2 What about constructors?
  %p
    A simple proposal (inspired by
    %a{:href => 'http://javascript.crockford.com/prototypal.html'}< Crockford
    ):
  %pre
    :preserve
      thing.initialize = function() {
        this.createdAt = new Date;
      }
  %pre
    :preserve
      thing.beget = function(properties) {
        var begotten = Object.create(this);
        begotten.initialize();
        return begotten;
      }
  %pre
    :preserve
      mineral = thing.beget();
      mineral.location;
.page
  %h2 A step further:
  %p Target: provide for initializing properties with
  %pre
    :preserve
      // something = thing.beget({prop: 'value', ...});
.page
  %pre
    :preserve
      thing.beget = function(properties) {
        var begotten = Object.create(this);
        begotten.initialize();
        for (key in properties) {
          if (properties.hasOwnProperty(key)) {
            begotten[key] = properties[key];
          }
        }
        return begotten;
      };
.page
  %pre
    :preserve
      mineral = thing.beget();
  %pre
    :preserve
      organism = thing.beget({organic: true});
  %pre
    :preserve
      vegetable = organism.beget();
  %pre
    :preserve
      animal = organism.beget({motile: true});
.page
  %pre
    :preserve
      caveMan = animal.beget(name: 'Igor');
      club = vegetable.beget(length: '2 cubits');
      rock = mineral.beget(weight: '50 lbs');
  %pre
    :preserve
      [caveMan, club, rock].map(function(o) { return o.location });
  %pre
    :preserve
      [caveMan, club, rock].map(function(o) { return o.organic });
  %pre
    :preserve
      [caveMan, club, rock].map(function(o) { return o.motile });
  %pre
    :preserve
      [caveMan, club, rock].map(function(o) { return o.createdAt });

.page
  %h2 Recommended Reading
  :markdown
    - See the [Source code](/javascripts/slide_show.js) to this slide deck for a less contrived example.
    - [Understanding “Prototypes” in JavaScript](http://yehudakatz.com/2011/08/12/understanding-prototypes-in-javascript/), Yehuda Katz
    - [Simple JavaScript Inheritance](http://ejohn.org/blog/simple-javascript-inheritance/), John Resig
    - [Constructors considered mildly confusing](http://joost.zeekat.nl/constructors-considered-mildly-confusing.html) by Joost Diepenmaat, Zeekat Softwareontwikkeling
    - [Prototypal Inheritance in JavaScript](http://javascript.crockford.com/prototypal.html), Douglas Crockford
    - [Inheritance and the prototype chain](https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Inheritance_and_the_prototype_chain), MDN
